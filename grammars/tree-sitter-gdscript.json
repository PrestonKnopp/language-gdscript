{
  "name": "GDScript",
  "scopeName": "source.gdscript",
  "type": "tree-sitter",
  "parser": "tree-sitter-gdscript",
  "fileTypes": [
    "gd"
  ],
  "folds": [
    {
      "type": [
        "if_statement",
        "for_statement",
        "try_statement",
        "with_statement",
        "while_statement",
        "class_definition",
        "function_definition"
      ],
      "start": {
        "type": ":"
      }
    },
    {
      "start": {
        "type": "(",
        "index": 0
      },
      "end": {
        "type": ")",
        "index": -1
      }
    },
    {
      "start": {
        "type": "[",
        "index": 0
      },
      "end": {
        "type": "]",
        "index": -1
      }
    },
    {
      "start": {
        "type": "{",
        "index": 0
      },
      "end": {
        "type": "}",
        "index": -1
      }
    }
  ],
  "comments": {
    "start": "# "
  },
  "scopes": {
    "source": "source.gdscript",
    "comment": "comment.line",
    "expression_statement > string:nth-child(0)": "comment.block",
    "null": "constant.language.null",
    "true": "constant.language.boolean.true",
    "false": "constant.language.boolean.false",
    "integer": "constant.language.numeric.integer",
    "float": "constant.language.numeric.float",
    "string": "string.quoted",
    "escape_sequence": "constant.character.escape",
    "\"+\"": "keyword.operator",
    "\"-\"": "keyword.operator",
    "\"*\"": "keyword.operator",
    "\"/\"": "keyword.operator",
    "\"%\"": "keyword.operator",
    "\"==\"": "keyword.operator",
    "\"!=\"": "keyword.operator",
    "\">\"": "keyword.operator",
    "\"<\"": "keyword.operator",
    "\">=\"": "keyword.operator",
    "\"<=\"": "keyword.operator",
    "\"=\"": "keyword.operator",
    "\"+=\"": "keyword.operator",
    "\"-=\"": "keyword.operator",
    "\"*=\"": "keyword.operator",
    "\"/=\"": "keyword.operator",
    "\"%=\"": "keyword.operator",
    "\"&\"": "keyword.operator",
    "\"|\"": "keyword.operator",
    "\"^\"": "keyword.operator",
    "\"~\"": "keyword.operator",
    "\"<<\"": "keyword.operator",
    "\">>\"": "keyword.operator",
    "\"and\"": "keyword.logical",
    "\"or\"": "keyword.logical",
    "\"not\"": "keyword.logical",
    "\"in\"": "keyword.in",
    "\"is\"": "keyword.is",
    "\"as\"": "keyword.as",
    "\"if\"": "keyword.control",
    "\"else\"": "keyword.control",
    "\"elif\"": "keyword.control",
    "\"while\"": "keyword.control",
    "\"for\"": "keyword.control",
    "\"return\"": "keyword.control",
    "\"break\"": "keyword.control",
    "\"continue\"": "keyword.control",
    "\"pass\"": "keyword.control",
    "\"match\"": "keyword.control",
    "\"class\"": "storage.type.class",
    "\"class_name\"": "storage.type.class_name",
    "\"func\"": "storage.type.function",
    "\"enum\"": "storage.type.enum",
    "\"signal\"": "storage.type.signal",
    "\"var\"": "storage.type.variable",
    "\"onready\"": "storage.modifier.variable",
    "\"export\"": "storage.modifier.variable",
    "\"extends\"": "storage.modifier",
    "\"const\"": "storage.modifier",
    "tool_statement": "storage.modifier",
    "static_keyword": "storage.modifier",
    "remote_keyword": "storage.modifier.remote_keyword",
    "setget > \"setget\"": "keyword.other",
    "setget > setter, setget > getter": "entity.name.function.setter.getter",
    "type": "entity.name.type.class",
    "class_definition > name": "entity.name.type.class",
    "enum_definition > name": "entity.name.type.enum",
    "function_definition > name": "entity.name.function",
    "const_statement > name": "entity.name.constant",
    "class_name_statement > name": "entity.name.type.class",
    "signal_statement > name": "entity.function.name.other",
    "get_node": "string.quoted",
    "node_path": "string.quoted",
    "attribute > identifier:nth-child(0)": [
      {
        "match": "^[$A-Z_]{2,}$",
        "scopes": "constant.other"
      },
      {
        "match": "^[A-Z]",
        "scopes": "meta.class"
      }
    ],
    "attribute > identifier": [
      {
        "match": "^[$A-Z_]{2,}$",
        "scopes": "constant.other"
      },
      {
        "match": "^[A-Z]",
        "scopes": "meta.class"
      },
      "variable.other.object.property"
    ],
    "attribute_call > identifier": "entity.name.function",
    "attribute_subscript > identifier": "variable.other.object.subscript",
    "call > identifier:nth-child(0)": [
      {
        "match": "^(sin|cos|tan|sinh|cosh|tanh|asin|acos|atan|atan2|sqrt|fmod|fposmod|floor|ceil|round|abs|sign|pow|log|exp|isnan|isinf|ease|decimals|stepify|lerp|dectime|randomize|randi|randf|rand_range|seed|rand_seed|deg2rad|rad2deg|linear2db|db2linear|max|min|clamp|nearest_po2|weakref|funcref|convert|typeof|str|print|printt|prints|printerr|printraw|var2str|str2var|var2bytes|bytes2var|range|load|inst2dict|dict2inst|hash|Color8|print_stack|instance_from_id|preload|yield|assert)$",
        "scopes": "support.function"
      },
      "entity.name.function"
    ],
    "enumerator > identifier:nth-child(0)": "constant.enum",
    "identifier": [
      {
        "match": "^[$A-Z_]{2,}$",
        "scopes": "constant.other"
      },
      {
        "match": "^[A-Z]",
        "scopes": "meta.class"
      }
    ]
  }
}
